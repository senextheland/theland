#class {leader} {open}

#nop 1: cmd_group_name, 2: tell-command, 3: cmd_my_command
#alias {def_group_task0} {
  #alias {%1} {
    exec_task {%1} {tell group '%2} {%%1} {%%2} {
      #action {FAIL: %2} {task_%1_fail};
      #action {OK: %2} {%3 {task_%1_done} {task_%1_fail}}    
    }
  } {15}
}

#alias {def_group_resilient_task0} {
  #alias {%1} {
    exec_task {%1} {tell group '%2} {%%1} {%%2} {
      #action {FAIL: %2} {task_%1_try_not_to_fail};
      #action {OK: %2} {%3 {task_%1_done} {task_%1_try_not_to_fail}};

      #var {task_%1[attempts]} {5};

      #alias {task_%1_timeout} {
        task_%1_try_not_to_fail {timeout}
      };

      #alias {task_%1_try_not_to_fail} {
        debug RECOVER-TASK error={%%%0} combat=$combat_status;
	#if {"$combat_status" != "idle"} {
	  debug RECOVER-TASK --> attempt on-rip;
	  hook {on_rip} {once} {task_%1} {task_%1_attempt_continuation}
	} {
	  debug RECOVER-TASK --> attempt on-delay;
	  #delay {task_%1} {task_%1_attempt} {1.0}
	}
      };

      #alias {task_%1_attempt_continuation} {
        task_%1_attempt;
	trampoline {task_%1_attempt_continuation} {%%%1}
      };

      #alias {task_%1_end_hook} {
        hook {on_rip} {remove} {task_%1};
	#undelay {task_%1}
      }      
    }
  } {15}
}

#alias {def_group_optimistic_task0} {
  #alias {%1} {
    exec_task {%1} {tell group '%2} {%%1} {%%2} {    
      #action {FAIL: %2} {task_%1_optimistic_continue};
      #action {OK: %2} {%3 {task_%1_done} {task_%1_optimistic_continue}};

      #alias {task_%1_timeout} {
        task_%1_optimistic_continue {timeout}
      };

      #alias {task_%1_optimistic_continue} {
        debug OPTIMISTIC-CONTINUE %1: %%%0;
	task_%1_done
      }
    }
  } {15}
}

#alias {def_group_task1} {
  #alias {%1} {
    exec_task {%1} {tell group '%2} {%%2} {%%3} {
      #action {FAIL: %2} {task_%1_fail};
      #action {OK: %2} {%3 {task_%1_done} {task_%1_fail}}
    }
  } {15}
}

#alias {def_group_optimistic_task1} {
  #alias {%1} {
    exec_task {%1} {tell group '%2} {%%2} {%%3} {
      #action {FAIL: %2} {task_%1_optimistic_continue};
      #action {OK: %2} {%3 {task_%1_done} {task_%1_optimistic_continue}};

      #alias {task_%1_timeout} {
        task_%1_optimistic_continue {timeout}
      };

      #alias {task_%1_optimistic_continue} {
        debug OPTIMISTIC-CONTINUE %1: %%%0;
	task_%1_done
      }
    }
  } {15}
}

#alias {def_group_task2} {
  #alias {%1} {
    exec_task {%1} {tell group '%2} {%%3} {%%4} {
      #action {FAIL: %2} {task_%1_fail};
      #action {OK: %2} {%3 {task_%1_done} {task_%1_fail}}
    }
  } {15}
}

def_group_resilient_task0 {cmd_group_recall} {recall} {cmd_recall}
def_group_optimistic_task0 {cmd_group_repair} {repair-eq} {eq_repair}
def_group_optimistic_task1 {cmd_group_pawn} {pawn: %1} {%1}
def_group_optimistic_task0 {cmd_group_deposit} {deposit} {cmd_deposit}
def_group_task0 {cmd_group_scrappy} {scrappy} {cmd_scrap_on}
def_group_task0 {cmd_group_noscrap} {noscrap} {cmd_scrap_off}
def_group_task1 {cmd_group_target} {target: %1} {cmd_set_target %1}
def_group_task0 {cmd_group_spellup} {spellup} {spellup}
def_group_task1 {cmd_group_autoloot} {autoloot: %1} {cmd_autoloot {@@autoloot_type{%1}}}
def_group_task1 {cmd_group_drop_all} {drop-all: %1} {cmd_drop_all %1}
def_group_task0 {cmd_group_sneak} {sneak} {cmd_sneak}
def_group_task0 {cmd_group_unsneak} {unsneak} {cmd_unsneak}
def_group_task0 {cmd_group_agg} {agg} {cmd_agg}
def_group_task0 {cmd_group_unagg} {unagg} {cmd_unagg}
def_group_task0 {cmd_group_stand} {stand} {cmd_stand}
def_group_task2 {cmd_group_imm} {imm: %1 %2} {cmd_imm_%1_%2}
def_group_task0 {cmd_group_reset_weapons} {reset-weapons} {cmd_reset_weapon_state}
def_group_task0 {cmd_group_regen_fairy} {regen-fairy} {cmd_regen_fairy}

#alias {cmd_presence_check} {
  exec_task {cmd_presence_check} {debug PRESENCE-CHECK-ATTEMPT; farlook %1} {%3} {%4} {

    #var {task_cmd_presence_check[attempts]} {5};    

    #alias {presence_check_separated} {
      task_cmd_presence_check_reset_timeout;
      tell group 'danger: separated -- remaining attempts $task_cmd_presence_check[attempts];
      #delay {cmd_presence_check} {task_cmd_presence_check_attempt} {5}
    };

    #alias {task_cmd_presence_check_end_hook} {
      #undelay {cmd_presence_check}
    };

    #action {You see %2 right here.} {task_cmd_presence_check_done} {2};
    #action {you spot %2} {presence_check_separated} {2};
    #action {You peer around, but can't find anyone of that description.} {presence_check_separated} {2};    
  }
}

#alias {cmd_buy_recalls} {
  exec_task {cmd_buy_recalls} {invis_off; buy %1*recall; invis_on} {%2} {%3} {
    #function {half_quantity} {#math {result} {%1 / 2}};
    #action {You now have a scroll of recall} {give @half_quantity{}*recall $robot};
    #action {You give a scroll of recall} {task_cmd_buy_recalls_done};
    #action {Zifnab pukes on your clothes!} {task_cmd_buy_recalls_fail};
    #action {Sorry, I haven't got exactly that item.} {task_cmd_buy_recalls_fail}
  }
}

#alias {cmd_group_walk} {
  cmd_group_walk_kill {%1} {%2} {} {%3} {%4}
}

#alias {cmd_group_walk_kill} {
  exec_task {cmd_group_walk_kill} {%1} {%4} {%5} {
    #action {Sorry, there is no room to get in there.} {task_cmd_group_walk_kill_attempt};
    #action {Alas, you cannot go that way...} {
      tell group 'walk failed;
      task_cmd_group_walk_kill_fail
    };
    
    #action {%2} {
      #if {"%3" != ""} {
        debug GROUP-WALK DONE --> kill %3;
        kill %3;
      } {
        debug GROUP-WALK DONE
      };
      tell group 'walk: %1 -- "%2";
      task_cmd_group_walk_kill_done
    }
  }
}

#alias {cmd_group_run_kill} {
  exec_task {cmd_group_run_kill} {run %1} {%4} {%5} {
    #action {%2} {
      #if {"%3" != ""} {
        debug GROUP-RUN DONE --> kill %3;
        kill %3;
      } {
        debug GROUP-RUN DONE
      };
      tell group 'run: %1 -- "%2";
      task_cmd_group_run_kill_done
    }
  }
}

#alias {cmd_group_teleport_room} {
  tell group 'teleport-room: %1;
  cmd_teleport_room {%1} {%2} {%3}
}

#alias {cmd_group_cast} {
  #nop FIXME -- it would be better to execute these as continuations, but this tasks blocks them from running;
  cmd_cast_me {%1} {#nop} {#nop};
  exec_cast {%1} {$robot} {#nop} {#nop};
  trampoline {cmd_group_cast} {%2}
}

#class {leader} {save}
#class {leader} {close}