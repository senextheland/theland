#class {control} {open}

#list {zones} {create}
#var {zone_current} {}
#var {zone_state} {init}
#var {zone_recover_state} {off}
#var {need_pawn} {}

task_list {zone_steps} {create} {zone_finish} {zone_recover}

#nop ---------------------------
#nop DSL to define zones
#nop ---------------------------

#alias {zone_extend} {
  task_list {zone_steps} {add} %0
}


#nop -------------------------
#nop Zone loop control
#nop -------------------------

#alias {zone_loop} {
  #var {zone_state} {init};
  #list {zones} {clear};
  task_list {zone_steps} {clear};
  executor {global_tasks} {clear};
  reset_zone_timeout;
  #list {zones} {add} %0
}

#alias {zone_loop_start} {
  #var {zone_state} {start};
  #var {zone_recover_state} {off};
  zone_rewind;
  zone_finish
}

#alias {zone_loop_stop} {
  #var {zone_state} {stop};
  zone_timeout_off
}

#alias {zone_test} {
  #var {zone_state} {testing};
  task_list {zone_steps} {clear};
  executor {global_tasks} {clear};
  %1;
  task_list {zone_steps} {nudge};
}

task_list {zone_steps} {continue-hook-add} {10_zone_loop_stop_hook} {zone_loop_stop_hook}
task_list {zone_steps} {continue-hook-add} {20_zone_loop_safety_hook} {zone_loop_safety_hook}
task_list {zone_steps} {continue-hook-add} {50_zone_loop_continue_when_hook} {zone_loop_continue_when_hook}
hook {on_rip} {add} {10_zone_loop_rip_hook} {zone_loop_rip_hook}
hook {before_walk_room} {add} {10_zone_loop_recover_fish_hook} {zone_loop_recover_fish_hook}

#alias {zone_continuation} {
  #if {"$zone_state" == "testing"} {
    #unvar {zone_step_continue_type}; %1
  } {
    hook {zone_steps[hook]} {exec-each}
      {#unvar {zone_step_continue_type}; %1}
      {debug ZONE-STEP-CONTINUE-FAIL --> ??}
  }
}

#alias {zone_loop_stop_hook} {
  #if {"$zone_state" != "start" && "$zone_state" != "testing"} {
    debug ZONE-LOOP-STOP: hook zone_state=$zone_state    
  } {
    %1
  }
}

#alias {zone_loop_safety_hook} {
  #if {"$zone_safety" == "on"} {
    reset_zone_timeout;
    cmd_presence_check {$robot} {$robot_description} {%1} {%2}
  } {
    %1
  }
}

#alias {zone_loop_continue_when_hook} {
  #if {"$tick_state" == "soon"} {
    tell group 'continue: tick soon, waiting...;
    cmd_group_spellup {#nop} {#nop};
    hook {on_tick} {once} {zone_loop_continue_when_hook} {%1}
  } {
    %1
  }
}

#alias {zone_loop_rip_hook} {
  #if {"$zone_state" == "start"} {
    reset_zone_timeout    
  };
  trampoline {zone_loop_rip_hook} {%1}
}

#alias {zone_loop_recover_fish_hook} {
  #if {"$zone_safety" == "on"} {
    recover_fish_check_container_hook {%1}
  } {
    %1
  }
}

#alias {reset_zone_timeout} {  
  #delay {reset_zone_timeout} {zone_timeout} {60}
}

#alias {zone_timeout_off} {
  #undelay {reset_zone_timeout}
}

#alias {zone_timeout} {
  #if {"$combat_status" != "idle"} {
    debug ZONE-TIMEOUT!! combat_status=$combat_status --> reset;
    reset_zone_timeout  
  };
  #elseif {"$zone_safety" == "on" && "$zone_state" == "start"} {
    debug ZONE-TIMEOUT!!! safety=$zone_safety state=$zone_state --> retry;
    zone_retry
  };
  #else {
    debug ZONE-TIMEOUT!!! safety=$zone_safety state=$zone_state --> ignore
  }
}


#nop -------------------------
#nop Zone step control
#nop -------------------------

#var {zone_safety} {on}
hook {on_zone_end} {create}

#alias {zone_recover} {
  debug ZONE-RECOVER current=$zone_current: %0
}

#alias {zone_finish} {#show ZONE-FINISH: $zone_current}

#action {ZONE-FINISH} {
  task_list {zone_steps} {clear};
  hook {on_zone_finish} {fire};
  zone_timeout_off;

  #if {"$zone_current" == "zone_interlude"} {    
    zone_fast_forward;
    zone_start {$zones[1]}
  } {
    zone_start {zone_interlude}
  };
}

#alias {zone_start} {#show ZONE-START: %1}

#action {ZONE-START: %1} {
  #if {"$zone_state" == "start"} {
    #var {zone_current} {%1};    
    $zone_current;
    task_list {zone_steps} {nudge}
  } {
    debug ZONE-START: ignore state=$zone_state
  }
}

#alias {zone_rewind} {
  #list {zones} {insert} {1} {$zones[-1]};
  #list {zones} {size} {result};
  #list {zones} {delete} {$result};
}

#alias {zone_fast_forward} {
  #list {zones} {get} {1} {result};
  #list {zones} {delete} {1};
  #list {zones} {add} {$result}
}

#alias {zone_retry} {
  executor {global_tasks} {clear};
  task_list {zone_steps} {clear};
  cmd_check_fish
    {zone_retry_all_fishes}
    {zone_retry_fishes_missing}
}

#alias {zone_retry_all_fishes} {
  zone_rewind;
  zone_finish
}

#alias {zone_retry_fishes_missing} {
  #nop revert the recover state to "off" so it's set back to "on" + rewind;
  #var {zone_recover_state} {off};
  zone_finish
}

#alias {transition_zone_recovery_continuation} {
  #if {$fish_lost <= 0} {
    debug NO FISH LOST --> zone_recover_state=off --> continue;
    #var {zone_recover_state} {off};
    cmd_group_scrappy {%1} {%1}
  };
  #elseif {"$zone_recover_state" == "off"} {    
    #var {zone_recover_state} {on};
    zone_rewind;
    tell group 'FISH LOST --> zone_recover_state=on --> retry;
    cmd_group_noscrap {%1} {%1}
  };
  #else {
    tell group 'FISH STILL LOST --> halt;
    #var {zone_state} {stop};
    %1
  }
}


#nop --------------------------
#nop Zone commands
#nop --------------------------

#alias {def_zone_task0} {#alias {%1} {exec {zone_task} {%2} {%%1} {%%2}}}
#alias {def_zone_task1} {#alias {%1} {exec {zone_task} {%2 {%%1}} {%%2} {%%3}}}
#alias {def_zone_task2} {#alias {%1} {exec {zone_task} {%2 {%%1} {%%2}} {%%3} {%%4}}}
#alias {def_zone_task3} {#alias {%1} {exec {zone_task} {%2 {%%1} {%%2} {%%3}} {%%4} {%%5}}}


#nop --------------------------
#nop General-purpose
#nop --------------------------

def_zone_task2 {walk_fast} {cmd_walk_fast}
def_zone_task1 {zone_safety} {cmd_zone_safety}
def_zone_task1 {sync_command} {cmd_sync_command}

#alias {cmd_zone_safety} {
  exec_sync_task1 {cmd_zone_safety} {%2} {%3} {
    debug zone_safety --> %1;
    #var {zone_safety} {%1};
    #if {"%1" == "on"} {
      reset_zone_timeout
    }
  }
}

#alias {cmd_sync_command} {
  exec_sync_task1 {cmd_sync_command} {%2} {%3} {
    debug sync_command --> %1;
    %1
  }
}

#nop --------------------------
#nop Inn & town
#nop --------------------------

def_zone_task1 {need_pawn} {cmd_need_pawn}
def_zone_task0 {group_recall} {cmd_group_recall}
def_zone_task0 {regen_some} {cmd_regen_some}
def_zone_task0 {group_repair} {cmd_group_repair}
def_zone_task0 {capture_score} {cmd_score {#nop}}
def_zone_task1 {buy_recalls} {cmd_buy_recalls}
def_zone_task1 {group_pawn} {cmd_group_pawn}
def_zone_task0 {group_deposit} {cmd_group_deposit}
def_zone_task0 {transition_zone_recovery_state} {cmd_transition_zone_recovery_state}
def_zone_task2 {announce} {cmd_announce}
def_zone_task0 {group_spellup} {cmd_group_spellup}

#alias {cmd_need_pawn} {
  exec_sync_task1 {cmd_need_pawn} {%2} {%3} {
    debug need_pawn--> %1;
    #var {need_pawn} {%1}
  }
}

#alias {cmd_transition_zone_recovery_state} {
  cmd_check_fish
    {transition_zone_recovery_continuation {%1}}
    {transition_zone_recovery_continuation {%1}}
}

#alias {cmd_announce} {
  exec_task {cmd_announce} {#show cmd_announce} {%3} {%4} {
    #action {cmd_announce} {
      %1;
      #delay {cmd_announce} {task_cmd_announce_done} {%2}
    }
  }
}

#alias {zone_interlude} {  
  ext_recall_to_inn;
  ext_visit_town {$need_pawn};
  zone_extend
    {need_pawn {}}
}

#alias {ext_recall_to_inn} {
  zone_extend
    {zone_safety off}    
    {group_recall}
    {transition_zone_recovery_state}
    {announce {next_zone_announcement} {2.0}}
    {regen_some}
    {group_repair}
    {zone_safety on}  
}

#alias {next_zone_announcement} {tell group 'next-zone: $zones[2]}
#alias {buy_recall_announcement} {tell group 'buy-recalls}

#alias {ext_visit_town} {
  zone_extend
    {zone_safety off}
    {walk_fast {$inn_mk} {Market Square}}
    ;
  
  ext_buy_recalls;
  #if {"%1" != "" } {ext_pawn {%1}};
  ext_bank;

  zone_extend
    {zone_safety on}
}

#alias {ext_buy_recalls} {
  zone_extend
    {walk_fast {2w1n} {The Magic Shop}}
    {announce {buy_recall_announcement} {2.0}}
    {buy_recalls 2}
    {walk_fast {1s2e} {Market Square}}  
}

#alias {ext_pawn} {
  zone_extend
    {walk_fast {$mk_pawn} {Slick Willy's Pawn Shop}}
    {group_pawn {%1}}
    {walk_fast {$pawn_mk} {Market Square}}
}

#alias {ext_bank} {
  zone_extend
    {walk_fast {$mk_bank} {Midgaard Bank}}
    {capture_score}    
    {group_deposit}
    {walk_fast {$bank_mk} {Market Square}}
}


#nop --------------------------
#nop Areas
#nop --------------------------

def_zone_task1 {set_target} {cmd_group_target}
def_zone_task0 {group_scrappy} {cmd_group_scrappy}
def_zone_task0 {group_noscrap} {cmd_group_noscrap}
def_zone_task1 {open_door} {cmd_open_door}
def_zone_task1 {teleport_room} {cmd_teleport_room}
def_zone_task1 {wait_for_room} {cmd_wait_for_room}
def_zone_task1 {confirm_room} {cmd_look_room}
def_zone_task1 {confirm_exit} {cmd_check_exit}
def_zone_task0 {regen_fairy} {cmd_regen_fairy}
def_zone_task1 {pick} {cmd_pick_lock}
def_zone_task2 {pawn_all_from_bag} {cmd_pawn_all_from_bag}
def_zone_task2 {gather_all_into_bag} {cmd_gather_all_into_bag}
def_zone_task2 {unlock_door} {cmd_unlock_door}
def_zone_task3 {unlock_door_with_key} {cmd_unlock_door_with_key}
def_zone_task2 {group_walk} {cmd_group_walk}
def_zone_task3 {group_walk_kill} {cmd_group_walk_kill}
def_zone_task1 {group_teleport_room} {cmd_group_teleport_room}
def_zone_task1 {group_autoloot} {cmd_group_autoloot}
def_zone_task1 {group_drop_all} {cmd_group_drop_all}
def_zone_task0 {group_sneak} {cmd_group_sneak}
def_zone_task0 {group_unsneak} {cmd_group_unsneak}
def_zone_task0 {group_agg} {cmd_group_agg}
def_zone_task0 {group_unagg} {cmd_group_unagg}

#class {control} {save}
#class {control} {close}