#class {control} {open}

#list {zones} {create}
#var {zone_current} {}
#var {zone_state} {init}
#var {zone_recover_state} {off}
#var {need_pawn} {}

task_list {zone_steps} {create} {zone_finish} {zone_recover}

#nop ---------------------------
#nop DSL to define zones
#nop ---------------------------

#alias {zone_extend} {
  task_list {zone_steps} {add} %0
}


#nop -------------------------
#nop Zone loop control
#nop -------------------------

#alias {zone_loop} {
  #var {zone_state} {init};
  #list {zones} {clear};
  task_list {zone_steps} {clear};
  executor {global_tasks} {clear};
  reset_zone_timeout;
  #list {zones} {add} %0
}

#alias {zone_loop_start} {
  #var {zone_state} {start};
  #var {zone_recover_state} {off};
  #var {zone_current} {};
  zone_rewind;
  zone_finish
}

#alias {zone_loop_stop} {
  #var {zone_state} {stop};
  zone_timeout_off
}

#alias {zone_test_mark_start} {
  #format {zone_test_time_start} {%T} {};
  #format {zone_test_exp_start} {$score_exp};
  trampoline {zone_test_mark_start} {%1}
}

#alias {zone_test_mark_end} {
  #format {zone_test_time_end} {%T} {};
  #format {zone_test_exp_end} {$score_exp};

  #math {zone_test_exp_delta} {$zone_test_exp_end - $zone_test_exp_start};
  #math {zone_test_time_delta} {$zone_test_time_end - $zone_test_time_start};
  #math {zone_test_exp_rate} {$zone_test_exp_delta / $zone_test_time_delta * 60}
  tell group 'zone-test-end: $zone_test_name time=$zone_test_time_delta exp=$zone_test_exp_delta rate/min=$zone_test_exp_rate;

  trampoline {zone_test_mark_end} {%1}
}

#alias {zone_test} {
  #var {zone_state} {testing};
  #var {zone_test_name} {%1};
  task_list {zone_steps} {clear};
  executor {global_tasks} {clear};  

  zone_extend
    {capture_score}
    {zone_test_mark_start}
    ;
  
  %1;

  zone_extend
    {capture_score}
    {zone_test_mark_end}
    ;

  task_list {zone_steps} {nudge};
}

task_list {zone_steps} {continue-hook-add} {10_zone_loop_stop_hook} {zone_loop_stop_hook}
task_list {zone_steps} {continue-hook-add} {20_zone_loop_safety_hook} {zone_loop_safety_hook}
task_list {zone_steps} {continue-hook-add} {50_zone_loop_continue_when_hook} {zone_loop_continue_when_hook}
hook {on_fight_start} {add} {10_zone_loop_fight_start_hook} {zone_loop_fight_start_hook}
hook {on_rip} {add} {10_zone_loop_rip_hook} {zone_loop_rip_hook}
hook {before_walk_room} {add} {10_zone_loop_recover_fish_hook} {zone_loop_recover_fish_hook}
hook {on_robot_not_here} {add} {10_zone_loop_safety_hook} {zone_robot_missing_hook}

#alias {zone_continuation} {
  #if {"$zone_state" == "testing"} {
    #unvar {zone_step_continue_type}; %1
  } {
    hook {zone_steps[hook]} {exec-each}
      {#unvar {zone_step_continue_type}; %1}
      {debug ZONE-STEP-CONTINUE-FAIL --> ??}
  }
}

#alias {zone_loop_stop_hook} {
  #if {"$zone_state" != "start" && "$zone_state" != "testing"} {
    debug ZONE-LOOP-STOP: hook zone_state=$zone_state    
  };
  #elseif {"$zone_end_time_elapsed" == "true"} {
    debug ZONE-CONTINUATION: end-time elapsed --> end;
    zone_end
  };
  #else {
    %1
  }
}

#alias {zone_loop_safety_hook} {
  #if {$mana < 1000 && "$zone_state" == "start" && "$zone_current" != "zone_interlude"} {
    tell group 'ZONE-SAFETY-ALERT: mana is super low, aborting zone;
    zone_end
  };
  #elseif {"$eq_danger" == "true" && "$zone_current" != "zone_interlude"} {
    tell group 'EQ-DANGER --> need to repair;
    zone_retry
  };
  #elseif {"$zone_safety" == "on"} {
    reset_zone_timeout;
    cmd_presence_check {$robot} {$robot_description} {%1} {zone_loop_safety_presence_fail {%1} {%2}}
  };
  #else {
    %1
  }
}

#alias {zone_robot_missing_hook} {
  debug ROBOT-MISSING --> FAIL PRESENCE;
  zone_loop_safety_presence_fail {#nop} {#nop}
}

#alias {zone_loop_safety_presence_fail} {
  #if {"$combat_status" != "idle"} {
    debug ZONE-PRESENCE-FAIL safety=$zone_safety state=$zone_state combat=$combat_status --> ignore;
    %1
  }; #elseif {"$zone_state" == "start"} {    
    debug ZONE-PRESENCE-FAIL safety=$zone_safety state=$zone_state --> retry;
    zone_retry
  }; #else {
    %2
  }
}

#alias {zone_loop_continue_when_hook} {
  #if {"$tick_state" == "soon"} {
    tell group 'continue: tick soon, waiting...;
    cmd_group_spellup {#nop} {#nop};
    cmd_group_optimistic_heal {#nop} {#nop};
    hook {on_tick} {once} {zone_loop_continue_when_hook} {%1}
  } {
    quick_spellup_continuation {%1}
  }
}

#alias {zone_loop_fight_start_hook} {
  #if {"$zone_state" == "start"} {
    reset_zone_timeout
  };
  trampoline {zone_loop_fight_start_hook} {%1}
}

#alias {zone_loop_rip_hook} {
  #if {"$zone_state" == "start"} {
    reset_zone_timeout    
  };
  trampoline {zone_loop_rip_hook} {%1}
}

#alias {zone_loop_recover_fish_hook} {
  #if {"$zone_safety" == "on"} {
    recover_fish_check_container_hook {%1}
  } {
    %1
  }
}

#alias {set_zone_end_time} {
  #var {zone_end_time} {%1};
  #var {zone_end_time_elapsed} {false};
  #delay {set_zone_end_time} {zone_end_time_elapsed} {$zone_end_time}  
}

#alias {cmd_set_zone_end_time_minutes} {
  #math {zone_end_time_seconds} {%1 * 60};
  set_zone_end_time {$zone_end_time_seconds};
  trampoline {cmd_set_zone_end_time} {%2}
}

#alias {zone_end_time_elapsed} {
  debug ZONE-TIME: elapsed;
  #var {zone_end_time_elapsed} {true}
}

#alias {reset_zone_timeout} {
  debug_time {ZONE-TIMEOUT --> reset};
  #delay {reset_zone_timeout} {zone_timeout} {90}
}

#alias {zone_timeout_off} {
  debug_time {ZONE-TIMEOUT --> off};
  #undelay {reset_zone_timeout};
  #undelay {set_zone_end_time};
  #var {zone_end_time_elapsed} {}
}

#alias {zone_timeout} {
  #if {"$combat_status" != "idle"} {
    debug_time ZONE-TIMEOUT!! combat_status=$combat_status --> reset;
    reset_zone_timeout  
  };
  #elseif {"$zone_safety" == "on" && "$zone_state" == "start"} {
    debug_time ZONE-TIMEOUT!!! safety=$zone_safety state=$zone_state --> retry;
    zone_retry
  };
  #else {
    debug_time ZONE-TIMEOUT!!! safety=$zone_safety state=$zone_state --> ignore
  }
}


#nop -------------------------
#nop Zone step control
#nop -------------------------

#var {zone_safety} {on}
hook {on_zone_end} {create}

#alias {zone_recover} {
  debug ZONE-RECOVER current=$zone_current: %0;
  zone_retry
}

#alias {zone_finish} {#show ZONE-FINISH: $zone_current}

#alias {zone_interlude} {zone_interlude_fairy}

#action {NO-LIFE-PROTECTION-FOUND} {
  debug MISSING LIFE PROTECTION --> zone-loop-stop;
  zone_loop_stop
};

#action {ZONE-FINISH} {
  task_list {zone_steps} {clear};
  hook {on_zone_finish} {fire};
  zone_timeout_off;

  #if {"$zone_current" == "zone_interlude"} {
    #if {"$eq_danger" == "true"} {
      debug ZONE-START-EQ-DANGER --> resetting eq_danger, possible bug?;
      #var eq_danger;
      #var eq_hit;
      #var {eq_danger} {false}
    };
    zone_fast_forward;
    zone_start {$zones[1]}
  } {
    #if {"$zone_current" != ""} {
      finished_zone_announcement
    };
    zone_start {zone_interlude}
  };
}

#alias {zone_start} {#show ZONE-START: %1}

#function {log_epoch_seconds} {
  #format {result} {%T} {}
}

#alias {log_zone_start_exp} {
  #line log {zone-stats.csv} {@log_epoch_seconds{},$zone_current,$score_exp};
  trampoline {log_zone_start_exp} {%1}
}

#action {ZONE-START: %1} {
  #if {"$zone_state" == "start"} {
    #var {zone_current} {%1};
    task_list {zone_steps} {clear};

    #if {"$zone_current" != "zone_interlude"} {
      zone_extend
        {capture_score}
        {log_zone_start_exp}
    };
      
    $zone_current;
    
    task_list {zone_steps} {nudge}
  } {
    debug ZONE-START: ignore state=$zone_state
  }
}

#alias {zone_rewind} {
  #list {zones} {insert} {1} {$zones[-1]};
  #list {zones} {size} {result};
  #list {zones} {delete} {$result};
}

#alias {zone_fast_forward} {
  #list {zones} {get} {1} {result};
  #list {zones} {delete} {1};
  #list {zones} {add} {$result}
}

#alias {zone_end} {
  executor {global_tasks} {clear};
  task_list {zone_steps} {clear};
  tell group 'zone-end: terminating zone NOW --> next-zone;
  zone_finish
}

#alias {zone_retry} {
  executor {global_tasks} {clear};
  task_list {zone_steps} {clear};
  tell group 'zone-retry: terminating zone NOW --> reattempt;
  cmd_check_fish
    {zone_retry_all_fishes}
    {zone_retry_fishes_missing}
}

#alias {zone_retry_all_fishes} {
  #if {"$zone_current" == "zone_interlude"} {
    #var {zone_current} {}
  } {
    zone_rewind
  };
  zone_finish
}

#alias {zone_retry_fishes_missing} {
  #nop revert the recover state to "off" so it's set back to "on" + rewind;
  #if {"$zone_current" == "zone_interlude"} {
    #var {zone_current} {}
  } {
    #var {zone_recover_state} {off}
  };
  zone_finish
}

#alias {transition_zone_recovery_continuation} {
  #if {$fish_lost <= 0} {
    debug NO FISH LOST --> zone_recover_state=off --> continue;
    #var {zone_recover_state} {off};
    cmd_group_reset_weapons {%1} {%1}
  };
  #elseif {"$zone_recover_state" == "off"} {
    #var {zone_recover_state} {on};
    #if {"$zone_state" == "start"} {
      zone_rewind
    } {
      debug FISH LOST --> skip rewind state=$zone_state
    };
    tell group 'FISH LOST --> zone_recover_state=on --> retry;
    cmd_group_noscrap {%1} {%1}
  };
  #else {
    tell group 'FISH STILL LOST --> halt;
    #if {"$zone_state" == "start"} {
      #var {zone_state} {stop}
    } {
      debug FISH LOST --> skip halt state=$zone_state
    };
    %1
  }
}


#nop --------------------------
#nop Zone commands
#nop --------------------------

#alias {def_zone_task0} {#alias {%1} {exec {zone_task} {%2} {%%1} {%%2}}}
#alias {def_zone_task1} {#alias {%1} {exec {zone_task} {%2 {%%1}} {%%2} {%%3}}}
#alias {def_zone_task2} {#alias {%1} {exec {zone_task} {%2 {%%1} {%%2}} {%%3} {%%4}}}
#alias {def_zone_task3} {#alias {%1} {exec {zone_task} {%2 {%%1} {%%2} {%%3}} {%%4} {%%5}}}

#alias {def_zone_end_on_fail_task0} {#alias {%1} {exec {zone_task} {%2} {%%1} {zone_end}}}

#alias {def_zone_optimistic_task2} {#alias {%1} {exec {zone_task} {%2 {%%1} {%%2}} {%%3} {%%3}}}

#nop --------------------------
#nop General-purpose
#nop --------------------------

def_zone_task2 {walk_fast} {cmd_walk_fast}
def_zone_task1 {zone_safety} {cmd_zone_safety}
def_zone_task1 {sync_command} {cmd_sync_command}

#alias {cmd_zone_safety} {
  exec_sync_task1 {cmd_zone_safety} {%2} {%3} {
    debug zone_safety --> %1;
    #var {zone_safety} {%1};
    #if {"%1" == "on"} {
      reset_zone_timeout
    }
  }
}

#alias {cmd_sync_command} {
  exec_sync_task1 {cmd_sync_command} {%2} {%3} {
    debug sync_command --> %1;
    %1
  }
}

#nop --------------------------
#nop Inn & town
#nop --------------------------

def_zone_task1 {need_pawn} {cmd_need_pawn}
def_zone_task0 {group_recall} {cmd_group_recall}
def_zone_task0 {regen_some} {cmd_regen_some}
def_zone_task0 {group_repair} {cmd_group_repair}
def_zone_task0 {capture_score} {cmd_score {#nop}}
def_zone_task0 {capture_group_score} {cmd_group_score}
def_zone_task1 {buy_recalls} {cmd_buy_recalls}
def_zone_task1 {group_pawn} {cmd_group_pawn}
def_zone_task0 {group_deposit} {cmd_group_deposit}
def_zone_task0 {transition_zone_recovery_state} {cmd_transition_zone_recovery_state}
def_zone_task2 {announce} {cmd_announce}
def_zone_task0 {group_spellup} {cmd_group_spellup}

#alias {cmd_need_pawn} {
  exec_sync_task1 {cmd_need_pawn} {%2} {%3} {
    debug need_pawn--> %1;
    #var {need_pawn} {%1}
  }
}

#alias {cmd_transition_zone_recovery_state} {
  cmd_check_fish
    {transition_zone_recovery_continuation {%1}}
    {transition_zone_recovery_continuation {%1}}
}

#alias {cmd_announce} {
  exec_task {cmd_announce} {#show cmd_announce} {%3} {%4} {
    #action {cmd_announce} {
      %1;
      #delay {cmd_announce} {task_cmd_announce_done} {%2}
    }
  }
}

#alias {zone_interlude_regen} {
  ext_recall_to_inn;
  ext_walk_inn_to_town;
  ext_visit_town {$need_pawn};
  zone_extend
    {need_pawn {}}
}

#alias {zone_interlude_fairy} {
  ext_recall_and_repair;
  ext_crossroads_spellup;
  zone_extend
    {capture_group_score}
    {sync_command add_group_fight_hints}
    {sync_command ext_maybe_town_with_fairy}
}

#alias {ext_maybe_town_with_fairy} {
  #if {@starts_with{$zones[2];zone_hyrule} == 0 && (@regen_needed{} || $score_alignment < 850)} {
    ext_town_with_fairy {$need_pawn}
  } {        
    ext_visit_town {$need_pawn}
  };
  zone_extend
    {need_pawn {}}  
}

#alias {ext_recall_to_inn} {
  zone_extend
    {group_recall}
    {zone_safety off}    
    {transition_zone_recovery_state}
    {quick_spellup}
    {mode_bash off}    
    {regen_some}
    {group_repair}
    {group_spellup}
    {group_optimistic_heal}
    {zone_safety on}  
}

#alias {ext_recall_and_repair} {
  zone_extend
    {group_recall}
    {mode_bash off}
    {group_repair}
    {reset_weapons}
    {group_optimistic_heal}    
}

#alias {ext_crossroads_spellup} {
  zone_extend
    {walk_fast {$inn_crossroads_south} {Southern Path}}
    {group_spellup}
    {announce {enjoy_outdoors_announcement} {5.0}}
    {walk_fast {${crossroads_south_crossroads}${crossroads_mk}} {Market Square}}    
    ;
}

#alias {ext_walk_inn_to_town} {
  zone_extend
    {walk_fast {$inn_mk} {Market Square}}    
}

#alias {ext_town_with_fairy} {
  ext_bank;
  zone_extend
    {walk_fast {2w1n} {The Magic Shop}}
    {announce {buy_recall_announcement} {2.0}}
    {buy_recalls 4}
    {walk_fast {1s2e} {Market Square}}
    ;
    
  #if {"%1" != "" } {ext_greebo; ext_pawn {%1}};
  zone_extend;
    {need_pawn {}}
    ;

  zone_fairy_kill;

  ext_recall_and_repair;
  ext_crossroads_spellup
}

#alias {finished_zone_announcement} {tell group 'finished-zone: $zone_current}
#alias {next_zone_announcement} {tell group 'next-zone: $zones[2]}
#alias {buy_recall_announcement} {tell group 'buy-recalls}
#alias {buy_cauldron_announcement} {tell group 'buy-cauldrons}
#alias {enjoy_outdoors_announcement} {tell group 'ahh... the great outdoors!}

#alias {ext_visit_town} {
  ext_bank;
  ext_buy_recalls;
  #if {"%1" != "" } {ext_greebo; ext_pawn {%1}};
  zone_extend
    {announce {next_zone_announcement} {2.0}}    
}

#alias {ext_buy_recalls} {
  zone_extend
    {walk_fast {2w1n} {The Magic Shop}}
    {announce {buy_recall_announcement} {2.0}}
    {buy_recalls 2}
    {walk_fast {1s2e} {Market Square}}  
}

#alias {ext_greebo} {
  zone_extend
    {walk_fast {$mk_greebo} {Greebo's Occult Bookshoppe}}
    {announce {buy_cauldron_announcement} {2.0}}
    {walk_fast {$greebo_mk} {Market Square}}
}

#alias {ext_pawn} {
  zone_extend    
    {walk_fast {$mk_pawn} {Slick Willy's Pawn Shop}}
    {zone_safety off}
    {group_pawn {%1}}
    {zone_safety on}    
    {walk_fast {$pawn_mk} {Market Square}}
}

#alias {ext_bank} {
  zone_extend
    {walk_fast {$mk_bank} {Midgaard Bank}}
    {capture_score}
    {group_deposit}
    {walk_fast {$bank_mk} {Market Square}}
}


#nop --------------------------
#nop Areas
#nop --------------------------

#nop This variant of wait_for_room is useful for very long transition rooms where
#nop progress through the room is guaranteed but might exceed the zone timeout. For
#nop example, the Sleep and Whirlpool on the way to darkwiz. In general, the game
#nop guarantees progress through rooms like this so it's safe to use everywhere
#nop that rooms automatically transition from start to end.

def_zone_task1 {wait_for_room} {cmd_wait_for_room_without_timeout}
#alias {cmd_wait_for_room_without_timeout} {
  cmd_wait_for_room {%1} {reset_zone_timeout} {%2} {%3}
}

#nop This variant changing an immunity mode only applies to this player, not the
#nop entire group. This is a bit of a hack to workaround shortcomings of the
#nop thalos-ring being crucial for FLY, WB, and move regen on thief vs other rings
#nop like spectral-band that provide IMM ENERGY, etc. There is some risk that the
#nop group is vulnerable to attacks this player is immune from.

def_zone_task2 {self_imm} {cmd_self_imm}
#alias {cmd_self_imm} {
  cmd_imm_%1_%2 {%3} {%4}
}

#nop This variant of giving coins never fails. Use it to optimistically offload
#nop coins without failing the overall action if it doesn't work.

def_zone_task2 {try_give_coins} {cmd_try_give_coins}
#alias {cmd_try_give_coins} {
  cmd_give_coins {%1} {%2} {%3} {%3}
}

#nop Automatically bashing interferes with the ability to rescue and heal. Use
#nop `mode_bash=on` when daggering or on bosses. Keep if off when kill-walking
#nop where there may be ground of agg mobs that gang up on followers.

def_zone_task1 {mode_bash} {cmd_mode_bash}


#nop ... Commands ...

def_zone_task1 {set_target} {cmd_group_target}
def_zone_task0 {group_scrappy} {cmd_group_scrappy}
def_zone_task0 {group_noscrap} {cmd_group_noscrap}
def_zone_task1 {open_door} {cmd_open_door}
def_zone_task1 {close_door} {cmd_close_door}
def_zone_task1 {teleport_room} {cmd_teleport_room}
def_zone_task1 {wait_for_time} {cmd_wait_for_time}
def_zone_task1 {confirm_room} {cmd_look_room}
def_zone_task1 {confirm_exit} {cmd_check_exit}
def_zone_task0 {regen_fairy} {cmd_regen_fairy}
def_zone_task1 {pick} {cmd_pick_lock}
def_zone_task2 {pawn_all_from_bag} {cmd_pawn_all_from_bag}
def_zone_task2 {gather_all_into_bag} {cmd_gather_all_into_bag}
def_zone_task2 {unlock_door} {cmd_unlock_door}
def_zone_task3 {unlock_door_with_key} {cmd_unlock_door_with_key}
def_zone_task2 {group_walk} {cmd_group_walk}
def_zone_task3 {group_walk_kill} {cmd_group_walk_kill}
def_zone_task3 {group_run_kill} {cmd_group_run_kill}
def_zone_task1 {group_teleport_room} {cmd_group_teleport_room}
def_zone_task1 {group_autoloot} {cmd_group_autoloot}
def_zone_task1 {group_drop_all} {cmd_group_drop_all}
def_zone_task0 {group_sneak} {cmd_group_sneak}
def_zone_task0 {group_unsneak} {cmd_group_unsneak}
def_zone_task0 {group_agg} {cmd_group_agg}
def_zone_task0 {group_unagg} {cmd_group_unagg}
def_zone_task1 {group_cast} {cmd_group_cast}
def_zone_task0 {group_stand} {cmd_group_stand}
def_zone_task2 {group_imm} {cmd_group_imm}
def_zone_task0 {quick_spellup} {cmd_quick_spellup}
def_zone_task0 {reset_weapons} {cmd_group_reset_weapons}
def_zone_task2 {give_coins} {cmd_give_coins}
def_zone_task0 {group_regen_fairy} {cmd_group_regen_fairy}
def_zone_task1 {group_target_align} {cmd_group_target_align}
def_zone_task1 {set_zone_time_minutes} {cmd_set_zone_end_time_minutes}
def_zone_task0 {group_optimistic_heal} {cmd_group_optimistic_heal}
def_zone_task1 {portal_to} {cmd_portal}

def_zone_optimistic_task2 {get_corpse} {cmd_get_corpse}

def_zone_end_on_fail_task0 {group_align_check} {cmd_group_align_check}

#class {control} {save}
#class {control} {close}