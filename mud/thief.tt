#class {thief} {open}

#alias {cmd_heal_me} {
  cmd_ask_for_heal {%1} {%2}
}

#alias {do_fight_assist} {
  debug ASSIST {%1} {%2};
  
  
  #if {"$target" != ""} {
    debug TRY BACKSTAB {$target};
    backstab $target
  };

  #nop in case backstab failed;
  assist %1;
  
  debug ASSIST --> circle_loop;
  circle_loop
}

#nop NOTE -- when both dual-wield circle stabs fail, it seems like thief can fall out of assist
#nop         so be sure to end_fight to reset fighting status so assist triggers again.
#alias {circle_loop} {
  #class {circle_loop} {open};

  #var {circle_state} {idle};
  #var {circle_miss} {0};

  #alias {circle_miss_inc} {
    #math {circle_miss} {$circle_miss + 1};
    debug CIRCLE-LOOP missed --> $circle_miss
  };

  #alias {circle_miss_reset} {
    #var {circle_miss} {0}
  };

  #alias {circle_loop_done} {
    debug CIRCLE-LOOP: done;
    hook {on_rip} {remove} {circle_loop};
    task_cmd_circle_end;
    #class {circle_loop} {kill}
  };

  #alias {circle_once} {
    debug CIRCLE-LOOP: once;
    #nop deliberately avoiding execution queue so other commands don't interfere;
    cmd_circle {circle_hit} {circle_fail}
  };

  #alias {circle_loop_rip} {
    debug CIRCLE-LOOP: rip --> done;
    circle_loop_done;
    %%1  
  };

  #alias {circle_hit} {  
    debug CIRCLE-HIT --> debounce again;
    circle_miss_reset;
    reset_fight_timer;
    circle_debounce {hit} {circle_once}
  };
  
  #alias {circle_fail} {
    debug CIRCLE-FAIL: {%%1};
    reset_fight_timer;
    #switch {"%%1"} {
      #case {"no-fight"} {circle_debounce {done} {circle_loop_done}};
      #case {"not-assisting"} {circle_debounce {done} {circle_loop_maybe_assist}};
      #case {"missed"} {circle_miss_inc; circle_debounce {miss} {circle_once}};
      #case {"noticed"} {circle_debounce {noticed} {circle_once}};      
      #default {
        debug CIRCLE-FAIL: unrecognized error code {%%1}
      }
    }
  };

  #alias {circle_debounce} {
    debug DEBOUNCE-CIRCLE state=$circle_state;
    #if {"$circle_state" == "done"} {
      debug DEBOUNCE-CIRCLE: already done --> ignore
    };
    #elseif {"%%1" == "done"} {
      #var {circle_state} {done};
      #delay {circle_debounce} {%%2} {0.1}
    };
    #elseif {"%%1" == "miss" && $circle_miss >= 2} {
      debug CIRCLE-LOOP: too many misses --> re-assist;    
      #var {circle_state} {done};
      #delay {circle_debounce} {circle_loop_maybe_assist} {0.1}
    };
    #else {
      #delay {circle_debounce} {%%2} {0.1}
    }    
  };

  #alias {circle_loop_maybe_assist} {
    circle_loop_done;    
    #if {"$combat_status" != "idle"} {
      debug CIRCLE-LOOP: maybe asist combat_status=$combat_status --> assist;
      do_fight_assist {$currently_assisting}
    } {
       debug CIRCLE-LOOP: maybe asist combat_status=$combat_status --> ignore
    }
  };

  hook {on_rip} {add} {circle_loop} {circle_loop_rip};

  #class {circle_loop} {save};
  #class {circle_loop} {close};

  debug CIRCLE: initial attempt;
  circle_once
}

#alias {cmd_circle} {
  exec_task {cmd_circle} {circle} {%1} {%2} {
    #action {You need to be fighting before you can circle around to the back of your opponent.} {
      debug CIRCLE-NO-FIGHT;
      task_cmd_circle_fail {no-fight}
    };
    
    #action {Circle around back, are you crazy they are hitting you!} {
      debug CIRCLE-NOT-ASSIST;
      task_cmd_circle_fail {not-assisting}
    };
    
    #action {You tried to sneak around him, but he noticed you!} {
      task_cmd_circle_fail {noticed}
    } {4};
    
    #action {nimbly avoids your backstab, and you nearly cut your finger.} {
      task_cmd_circle_fail {missed}
    } {4};
    
    #action {makes a strange sound, as you place} {
      task_cmd_circle_done
    } {4};
    
    #action {makes a strange sound but is suddenly very silent, as you place} {
      task_cmd_circle_done
    } {4};

    #action {A cataclysmic feline's limbs go rigid} {
      task_cmd_circle_done
    };
    
    #action {You miss %%%1.} {
      task_cmd_circle_fail {missed}
    } {4}
  }
}

#class {thief} {save}
#class {thief} {close}